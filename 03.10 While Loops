// 03.10 While Loops

	int i = 0; 		// declare and initialize	
while (loop condition) {
	// do something
	decrement
	}


public class Main {

    public static void main(String[] args) {
        for (int i = 5; i >= 1; i--)
            System.out.println("Hello World " + i);

        int i = 0;
        while (i > 0) {
            System.out.println("Hello World " + i);
            i--;
        }
    }
}


// for loop is lighter and cleaner
// know in advance how many times want to execute one or more statements, use the for loop
// while loops (better) when we don't know exactly how times we want to repeat something
// while loop example: user keep doing something until they type quit or exit




// next example - user inputs something until quit then exit

// initilize an empty string
// write while loop 
// while input does not equal "quit" 		while (input != "quit")
// NOTE this code will not work b/c input is a string and string is a reference type. 
											String input = "";
// We can NOT use comparison operators between reference types.
// why? b/c these comparison operators will compare the address of our string objects and NOT their values.
// So if you have two strings "quit" and "quit" but STORED in different memory locations
// then those memory locations will have different addresses
// so we can NOT use the inequality operator to compare their values
// Instead we need to use the input.equals METHOD OF STRING OBJECTS
											while (input.equals("quit")) {
												// do something
											}
// And here we apply the not operator ie as long as the input does NOT equal "quit" we
											while (!input.equals("quit")) {
//     will continuously ask the user to input something

// We print a label like input 								System.out.print("Input: ");
// Use scanner object to read something from the terminal
// So lets create a Scanner object							Scanner scanner = new Scanner(System.in);
					Scanner scanner
// intantiate it using System.in
							= new Scanner(System.in)
// then call scanner.next 								scanner.next();
// this will return a string so we can store it this input variable			input = scanner.next();


// so far but problem here: with every iteration we will create a new Scanner scanner object. Thus there could be 100 scanner objects
// which will POLLUTE the memory. Bad. This is unnecessary. So its better to create the Scanner object OUTSIDE of the WHILE loop

// 03.10 While Loops

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        String input = "";
        while (!input.equals("quit")) {
            System.out.print("Input: ");
            Scanner scanner = new Scanner(System.in);
            input = scanner.next();
        }
}



// Now
// 03.10 While Loops

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);
        String input = "";

        while (!input.equals("quit")) {
            System.out.print("Input: ");
            input = scanner.next();
        }
    }
}


// Next issue is lowercase? "quit"
// if they type quit in upper case or any combination of lower case and upper case characters, then THIS LOGIC WILL NOT WORK the way we want
// So to fix this, right after reading something from the terminal 
								   input = scanner.next();
// we need to method chain this by calling the .toLowerCase() method of string objects
								   input = scanner.next().toLowerCase();
// now the user can type Upper or Lower case and it will be handled.

// Now to make this more interesting, lets echo back what the user inputs.
							  	   System.out.println(input);

// now lets run this and see what happens. Test it.



// 03.10 While Loops

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);
        String input = "";

        while (!input.equals("quit")) {
            System.out.print("Input: ");
            input = scanner.next().toLowerCase();
            System.out.println(input);
        }
    }
}


Input: 1
1
Input: 2
2
Input: 3
3
Input: 4
4
Input: Quit
quit

// so while loops are useful in situations when we dont know ahead of time, how many times we want to repeat something.
